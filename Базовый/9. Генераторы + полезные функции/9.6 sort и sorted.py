"""Сортировка с помощью sort и sorted"""

# a = [4, 3, -10, 1, 7, 12.5]
# a.sort()    # сортирует по возрастанию (только числа или только строки)
# print(a)

# a = [4, 3, -10, 1, 7, 12.5]
# a.sort(reverse=True)    # обратная сортирвка
# print(a)    # [12.5, 7, 4, 3, 1, -10]

# a = [4, 3, -10, 1, 7, 12.5]
# b = sorted(a)   # Создает новый отсортированный список
# print(b)        # [-10, 1, 3, 4, 7, 12.5]

# a = [4, 3, -10, 1, 7, 12.5]
# b = sorted(a, reverse=True) # Обратная сортировка
# print(b)            # [12.5, 7, 4, 3, 1, -10]


# сортировка кортежа со строками
# r = ("Киев", "Днепр", "Кропивницкий", "Одесса", "Житомр")
# b = sorted(r, key=len)  # сортировка по длине строки, возвращает список
# print(b)    # ['Киев', 'Днепр', 'Одесса', 'Житомр', 'Кропивницкий']



# Сортировка словаря
# d = {"river": "река", "house": "дом", "tree": "дерево", "road": "дорога"}
# b = sorted(d, key=len)  # Сортирует ключи
# print(b)            # ['tree', 'road', 'river', 'house']

# d = {"river": "река", "house": "дом", "tree": "дерево", "road": "дорога"}
# b = sorted(d.values())  # Сортирует значения
# print(b)             # ['дерево', 'дом', 'дорога', 'река']

# d = {"river": "река", "house": "дом", "tree": "дерево", "road": "дорога"}
# b = sorted(d.items())   # Отсортирует кортежами по ключам
# print(b)            # [('house', 'дом'), ('river', 'река'), ('road', 'дорога'), ('tree', 'дерево')]
# di = dict(sorted(d.items()))    # делаем словарь обратно с отсортированными ключами
# print(di)           # {'house': 'дом', 'river': 'река', 'road': 'дорога', 'tree': 'дерево'}

# d = {1: 5, 2: 7, 4: 1, 8: 3, 12: 20}
# sk = sorted(d, key=d.get)   # Сортирует по значению, а возвращает ключи
# print(sk)           # [4, 8, 1, 2, 12]




"""Подвиг 2. На вход поступает список целых чисел, 
записанных в одну строчку через пробел. 
Преобразуйте сначала эту строку в список из целых чисел, 
а затем список в кортеж из целых чисел. 
То есть, в программе будет две разные коллекции: список и кортеж. 
Отсортируйте по возрастанию значений эти коллекции методом sort, если это возможно, 
а иначе - примените функцию sorted.

На экран ничего выводить не нужно, только сформировать две отсортированные коллекции:
lst (список) - результат сортировки списка; 
tp_lst (кортеж) - результат сортировки кортежа.

P. S. На результаты сортировок обязательно должны ссылаться переменные с именами lst и tp_lst!

Sample Input:

-2 -1 8 11 4 5 
Sample Output:

True"""

# s = "-2 -1 8 11 4 5 "
# lst = list(map(lambda x: int(x), s.split()))
# sett = tuple(i for i in lst)
# lst.sort()
# tp_lst = tuple(sorted(sett))
# print(lst)
# print(tp_lst)

"""Подвиг 3. На вход функции с именем get_sort поступает словарь, например, такой:

d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}

Необходимо отсортировать словарь d по убыванию ключей (лексикографическая сортировка строк) 
и возвратить список из соответствующих значений ключей словаря. Например, для указанного словаря d, 
результатом должен быть список:

['дерево', 'лошадь', 'собака', 'кот', 'книга']

Сигнатура функции get_sort должна быть следующей:

def get_sort(d): ...

В программе только определить функцию, вызывать ее не нужно и что-либо выводить на экран тоже не нужно.

P. S. Подсказка: список в функции get_sort лучше всего формировать с помощью генератора списков.
 

Sample Input:

Sample Output:

True"""

# d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}
#
# def get_sort(d):
#     dic = {key: value for value, key in d.items()}
#     res = sorted(dic, key=dic.get, reverse=True)
#     return res
#
# print(get_sort(d))

# еще вариант
# def get_sort(d):
#     return list(d[x]  for x in sorted(d, reverse=True))

# еще проще
# def get_sort(d):
#     w = dict(sorted(d.items(), reverse=True))
#     q = [v for i,v in w.items()]
#     return q

"""Подвиг 4. На вход программы поступает список целых чисел, 
записанных в одну строчку через пробел. Необходимо выбрать из них четыре наибольших уникальных значения. 
Результат вывести на экран в порядке их убывания в одну строчку через пробел.

Sample Input:

10 5 4 -3 2 0 5 10 3
Sample Output:

10 5 4 3"""

# nums = list(map(int, input().split()))
# # nums = [10, 5, 4, -3, 2, 0, 5, 10, 3]
# sett = {i for i in nums}
# srt = sorted(sett, reverse=True)
# print(*srt[:4])


"""Подвиг 5. На вход программы поступают два списка целых чисел (каждый в отдельной строке), 
записанных в одну строчку через пробел. 
Длины списков могут быть разными. 
Необходимо первый список отсортировать по возрастанию, 
а второй - по убыванию. 
Полученные пары из обоих списков сложить друг с другом и получить новый список чисел. 
Результат вывести на экран в виде строки чисел через пробел.

P. S. Подсказка: не забываем про функцию zip.

Sample Input:

7 6 4 2 6 7 9 10 4
-4 5 10 4 5 65
Sample Output:

67 14 9 11 10 3"""

# a = list(map(int, input().split()))
# b = list(map(int, input().split()))
# a = [7, 6, 4, 2, 6, 7, 9, 10, 4]
# b = [-4, 5, 10, 4, 5, 65]
# a.sort()
# b.sort(reverse=True)
# lst = [i[0] + i[1] for i in list(zip(a, b))]
# print(*lst)


"""Подвиг 6. На вход программы поступает список товаров в формате:

название_1:цена_1
...
название_N:цена_N

Необходимо преобразовать этот список в словарь, ключами которого выступают цены (целые числа), 
а значениями - соответствующие названия товаров. 
Необходимо написать функцию, которая бы принимала на входе словарь
 и возвращала список из наименований трех наиболее дешевых товаров.

Вызовите эту функцию и отобразите на экране полученный список в 
порядке возрастания цены в одну строчку через пробел.

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

смартфон:120000
яблоко:2
сумка:560
брюки:2500
линейка:10
бумага:500
Sample Output:

яблоко линейка бумага"""

import sys

# считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['смартфон:120000', 'яблоко:2', 'сумка:560', 'брюки:2500', 'линейка:10', 'бумага:500']
# c = [i.split(":") for i in lst_in]
# d = {int(c[i][1]): c[i][0] for i in range(0, len(c), 1)}
# def low_price(d):
#     dic = {key: value for value, key in d.items()}
#     res = sorted(dic, key=dic.get)
#     return res[:3]
# print(*low_price(d))
