"""Функция zip"""

# a = [1, 2, 3, 4]
# b = [5, 6, 7, 8, 9, 10]
# z = zip(a, b)
# for x in z:
#     print(x)

# z = tuple(zip(a, b, c))
# print(z)

# a = [1, 2, 3, 4]
# b = [5, 6, 7, 8, 9, 10]
# c = "python"
# z = zip(a, b, c)
# for v1, v2, v3 in z:
#     print(v1, v2, v3)

# z1, z2, z3, z4 = zip(a, b, c)
# print(z1, z2, z3, z4)
# (1, 5, 'p') (2, 6, 'y') (3, 7, 't') (4, 8, 'h')

# z1, *z2 = zip(a, b, c)
# print(z1, z2)
# (1, 5, 'p') [(2, 6, 'y'), (3, 7, 't'), (4, 8, 'h')]

# z = zip(a, b, c)
# t1, t2, t3 = zip(*z)
# print(t1, t2, t3)
# (1, 2, 3, 4) (5, 6, 7, 8) ('p', 'y', 't', 'h')



"""Подвиг 1. Вводятся два списка целых чисел. 
Необходимо попарно перебрать их элементы и перемножить между собой. 
При реализации программы используйте функции zip и map. 
Выведите на экран первые три значения, используя функцию next. 
Значения выводятся в строчку через пробел. 
(Полагается, что три выходных значения всегда будут присутствовать).

Sample Input:

-7 8 11 -1 3
1 2 3 4 5 6 7 8 9 10
Sample Output:

-7 16 33"""


# l1 = list(map(int, input().split()))
# l2 = list(map(int, input().split()))
# l1 = [-7, 8, 11, -1, 3]
# l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# lstMap = list(zip(map(lambda a, b: (a * b), l1, l2)))
# for i in lstMap[:3]:
#     for j in i:
#         print(j, end=" ")

# еще вариант
# print(*list(map(lambda x: x[0] * x[1], zip(l1, l2)))[:3])



"""Подвиг 2. Вводится неравномерная таблица целых чисел. С помощью функции zip выровнить эту таблицу, 
приведя ее к прямоугольному виду, отбросив выходящие элементы. 
Вывести результат на экран в виде такой же таблицы чисел.

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

1 2 3 4 5 6
3 4 5 6
7 8 9
9 7 5 3 2
Sample Output:

1 2 3
3 4 5
7 8 9
9 7 5"""
# for i in zip(*zip(*lst_in)):
#     print(*i, sep='')
import sys

# считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['1 2 3 4 5 6', '3 4 5 6', '7 8 9', '9 7 5 3 2']
# nums = [i.replace(" ", "") for i in lst_in]
# lst2D = [[int(i) for i in j] for j in nums]
# z = zip(*zip(*lst2D))
# for i in z:
#     print(*i)


"""Подвиг 3. Вводится таблица целых чисел. Необходимо сначала эту таблицу представить двумерным списком чисел, 
а затем, с помощью функции zip выполнить транспонирование этой таблицы 
(то есть, строки заменить на соответствующие столбцы). 
Результат вывести на экран в виде таблицы чисел (числа в строках следуют через пробел).

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

1 2 3 4
5 6 7 8
9 8 7 6
Sample Output:

1 5 9
2 6 8
3 7 7
4 8 6"""

# Мой вариант
# import sys
# lst_in = list(map(str.strip, sys.stdin.readlines()))
lst_in = ['1 2 3 4', '5 6 7 8', '9 8 7 6']
# nums = [i.replace(" ", "") for i in lst_in]
# lst2D = [[i for i in j] for j in zip(*nums)]
# for i in lst2D:
#     print(*i, sep=' ')

# чужой
# for i in zip(*map(str.split, lst_in)):
#     print(*i)

# еще
# for row in zip(*[list(map(int, x.split())) for x in lst_in]):
#     print(*row)

# трэш
# [*map(lambda y: print(*y),zip(*[*map(lambda x: list(map(int,x.split())),lst_in)]))]

# простой
# matrix = [[int(i) for i in s.split()] for s in lst_in]
# tran_matrix = zip(*matrix)
# for line in tran_matrix:
#     print(*line)


"""Подвиг 4. Вводится строка из слов, записанных через пробел. 
Необходимо на их основе составить прямоугольную таблицу из трех столбцов и N строк 
(число строк столько, сколько получится). Лишнее (выходящее) слово - отбросить. 
Реализовать эту программу с использованием функции zip. 
Результат отобразить на экране в виде прямоугольной таблицы из слов, записанных через пробел (в каждой строчке).

Sample Input:

Москва Уфа Тула Самара Омск Воронеж Владивосток Лондон Калининград Севастополь
Sample Output:

Москва Уфа Тула
Самара Омск Воронеж
Владивосток Лондон Калининград"""

# Сам не решил
# lst = list(map(str, input().split()))
# lst = ['Москва', 'Уфа', 'Тула', 'Самара', 'Омск', 'Воронеж', 'Владивосток', 'Лондон', 'Калининград', 'Севастополь']
# res = zip(*[iter(lst)]*3)
# for x in res:
#     print(*x)

# еще вариант
# [print(*l) for l in zip(*[iter(input().split())]*3)]


# лямбда
# city_row=input().split()
# [print(*i) for i in zip(*map(lambda x:city_row[x::3],[0,1,2]))]

# еще
# n = [iter(input().split())]*3
# for i in zip(*n):
#     print(*i)

# Без итератора
# cities = input().split()
# [print(*i) for i in zip(lst[::3], lst[1::3], lst[2::3])]

# z = zip(lst[::3], lst[1::3], lst[2::3])
# for i in z:
#     print(*i)


"""Подвиг 5. Вводится строка. Требуется, используя введенную строку, 
сформировать N=10 пар кортежей в формате:

(символ, порядковый индекс)

Первый индекс имеет значение 0. Строка может быть короче 10 символов, а может быть и длиннее. 
То есть, число пар может быть 10 и менее. 
Используя функцию zip сформируйте указанные кортежи и сохраните в список с именем lst.

Программа ничего не должна отображать на экране, только формировать список из кортежей.

Sample Input:

Python дай мне силы пройти этот курс до конца!
Sample Output:

True"""

# мой без zip
# s = "Python дай мне силы пройти этот курс до конца!"
# s = input()
# lst = [(s[i], i) for i in range(len(s))][:10]
# print(lst)

# оказывается
# lst = [x for x in zip(s, range(10))]

# еще
# s = input()
# a = list(s)
# b = list(range(10))
# lst = list(zip(a, b))
# print(lst)

# Самое простое
# lst = list(zip(s, range(10)))