"""Функции isinstance и type для проверки типов данных"""

# a = 5
# print(isinstance(a, int)) # True
#
# b = True
# print(isinstance(b, int)) # True ибо bool наследуется от int
#
# print(type(b) == int)   # строгая проверка
# print(type(b) is bool)  # true

# Узнаем сумму всех вещественных
# data = (4.5, 8.7, True, "book", 8, 10, -11, [True, False])
#простой вариант
# s = 0
# for i in data:
#     if isinstance(i, float):
#         s += i
# print(s)

# быстрый вариант
# s = sum(filter(lambda x: isinstance(x, float), data))
# print(s)

# # сумма целочисленных
# s = sum(filter(lambda x: type(x) is int, data))
# print(s)        # 7

# a = 5.5
# print(isinstance(a, (int, float)))  # True

"""Подвиг 2. Определите функцию с именем get_add, 
которая складывает или два числа или две строки (но не число со строкой) 
и возвращает полученный результат. Если сложение не может быть выполнено, 
то функция возвращает значение None. Сигнатура функции должна быть, следующей:

def get_add(a, b): ...

Вызывать функцию не нужно, только определить. Также ничего не нужно выводить на экран.

P. S. Не забудьте про необходимость различения булевых значений (False, True) от целочисленных."""

# def get_add(a, b):
#     if type(a) is bool or type(b) is bool:
#         return None
#     elif isinstance(a, (int, float)) and isinstance(b, (int, float)):
#         return a + b
#     elif isinstance(a, str) and isinstance(b, str):
#         return a + b
#     else:
#         return None


"""Подвиг 3. Определите функцию с именем get_sum, 
которая принимает на входе итерируемый объект 
(список, строку, кортеж, словарь, множество) 
и вычисляет сумму только целых чисел, 
взятых из элементов итерируемого объекта. 
Вычисленная сумма возвращается функцией. 
Если целых чисел нет, то возвращается 0.

Сигнатура функции должна быть, следующей:

def get_sum(it): ...

Вызывать функцию не нужно, только определить. 
Также ничего не нужно выводить на экран.

Примеры входного аргумента функции:

get_sum([1,2,3, "a", True, [4, 5], "c", (4, 5)])
get_sum({5, 6, 7, '8', 5, '4'})
get_sum((10, "f", '33', True, 12))
get_sum(['1', True, False, (1, 23)])

P. S. Не забудьте про необходимость различения булевых значений (False, True) от целочисленных."""

# def get_sum(it):
#     return sum(filter(lambda x: type(x) is int, it))
#
#
# print(get_sum([1,2,3, "a", True, [4, 5], "c", (4, 5)]))
# print(get_sum({5, 6, 7, '8', 5, '4'}))
# print(get_sum((10, "f", '33', True, 12)))
# print(get_sum(['1', True, False, (1, 23)]))

"""Подвиг 4. Определите функцию с именем get_even_sum,
 которая принимает на входе итерируемый объект (список, строку, кортеж, словарь, множество) 
 и вычисляет сумму только целых четных чисел, взятых из элементов итерируемого объекта. 
 Результат возвращается функцией. Если целых чисел нет, то возвращается 0.

Сигнатура функции должна быть, следующей:

def get_even_sum(it): ...

Вызывать функцию не нужно, только определить. Также ничего не нужно выводить на экран.

P. S. Не забудьте про необходимость различения булевых значений (False, True) от целочисленных."""

# def get_even_sum(it):
#     return sum(filter(lambda x: x % 2 == 0 if type(x) is int else 0, it))
#
# print(get_even_sum([1,2,3, "a", True, [4, 5], "c", (4, 5)]))
# print(get_even_sum({5, 6, 7, '8', 5, '4'}))
# print(get_even_sum((10, "f", '33', True, 12)))
# print(get_even_sum(['1', True, False, (1, 23)]))


"""Подвиг 5. Определите функцию с именем get_list_dig, 
которая возвращает список только из числовых значений переданной ей коллекции (список или кортеж).

Сигнатура функции должна быть, следующей:

def get_list_dig(lst): ...

Вызывать функцию не нужно, только определить. 
Также ничего не нужно выводить на экран.

P. S. Не забудьте про необходимость различения булевых значений (False, True) от целочисленных."""

# def get_list_dig(lst):
#     return [i for i in lst if type(i) == int or type(i) == float]
#
# print(get_list_dig([1,2,3, "a", True, [4, 5], "c", (4, 5)]))