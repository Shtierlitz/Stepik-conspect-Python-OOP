"""#32. Множества (set) и их методы"""
# Не упорядоченая коллекция. Невозможно обратиться по индексу. Служит для убирания дублей
# a = {1, 2, 3, "hello"} - вот это и есть сет. В нем нет повторяющихся элементов.
# a = {[1, 2], 3, 4}    - так нельзя. Сеты содержат только неизменяемые типы данных и в них нельзя положить изменяемые
# a = set()         - создение множества
# a = {} - нельзя. Так будет словарь
# a = set([1, 2, 1, 0, -1, 2])  - а вот так можно. ПОлучим сен из уникальных элементов списка
# a = set("abrakadabra") И на выходе получим сет из уникальных символов {"d", "k", "a", "b", "r"}
# a = set(range(7)) - Можно обрабатывать итерируемые обьекты
# {0, 1, 2, 3, 4, 5, 6}
# cities = {"Калуга", "Краснодар", "Тюмень", "Ульяновск", "Москва", "Тюмень", "Калуга", "Ульяновск"}
# print(set(cities))  # {'Калуга', 'Москва', 'Краснодар', 'Ульяновск', 'Тюмень'}
# print(list(set(cities)))    # ['Калуга', 'Москва', 'Тюмень', 'Ульяновск', 'Краснодар']
# То есть можно из списка в сет и обратно в список отфильтрованое.
# Перебрать можно обычным способом через for или через iter next, но нельзя обратиться к индексу длины списка
# len(set)  - работает
# проверка i in set тоже штататная

# set.add(val)  - добавляет значение в сет
# set.update(["a", "b", (1, 2)]) - добавляет сразу несколько элементов. Любых, итерируемых, но только уникальные значения.
# set.discard(val)  - удаляет значение если такое существует без ошибок если нету.
# set.remove(val)   - удаляет значение, но если его нет вернет ошибку.
# set.pop() - без значения - удаляет и возвращает случайны элемент. Для пустого вызовет ошибку
# set.clear() - удаляет все из множества


"""Подвиг 3. Вводятся вещественные числа в одну строчку через пробел. 
Необходимо на их основе сформировать множество s.

Подсказка: множество можно создать по аналогии со списком: 

list(map(float, <список из строк чисел>))

Вывести на экран значения множества s в порядке возрастания в одну строчку через пробел, используя команду:

print(*sorted(s))

P. S. О функции sorted мы еще будем говорить, а также об операторе *. 
Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.

Sample Input:

-5.1 -3.0 7.6 10.3 -4.6 2.78
Sample Output:

-5.1 -4.6 -3.0 2.78 7.6 10.3"""

# print(*sorted(set(map(float, input().split()))))

"""6.4 Множества (set) и их методы
4 из 9 шагов пройдено
4 из 14 баллов  получено
Подвиг 4. Вводится текст в одну строку, слова разделены пробелом. 
Необходимо подсчитать число уникальных слов (без учета регистра) в этом тексте. 
Результат (число уникальных слов) вывести на экран.

Sample Input:

Мама мыла раму а потом мыла кота и еще мыла пол
Sample Output:

9"""

# s = set(map(str, input().split()))
# print(len(s))

# print(len(set(map(str, input().lower().split()))))

"""Подвиг 5. Вводится строка, содержащая латинские символы, пробелы и цифры. 
Необходимо выделить из нее все неповторяющиеся цифры (символы от 0 до 9) и вывести на экран 
в одну строку через пробел их в порядке возрастания значений. Если цифры отсутствуют, то вывести слово НЕТ.

Sample Input:

Python 3.9.11 - best language!
Sample Output:

1 3 9"""
# Мой вариант
# s = {'g', 'n', 's', 'b', 't', '!', 'y', 'o', 'h', 'P', '3', 'l', '1', 'u', '.', ' ', 'a', '-', '9', 'e'}
# s = set(input())
# lst = []
# count = 0
# for i in s:
#     if i.isdigit():
#         count += 1
#         lst.append(int(i))
# if count:
#     print(*sorted(lst))
# else:
#     print("НЕТ")

# еще
# print(*sorted(set(i for i in input().lower() if i.isdigit())) or ['НЕТ'])

"""Подвиг 6. В ночном клубе фиксируется список гостей. 
Причем гости могут выходить из помещения, а затем, снова заходить. 
Тогда их имена фиксируются повторно. 
На вход программы поступает такой список (каждое имя записано с новой строки). 
Требуется подсчитать общее число гостей, которые посетили ночной клуб. 
Полагается, что гости имеют уникальные имена. На экран вывести общее число гостей клуба.

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

Мария
Елена
Екатерина
Александр
Елена
Мария
Sample Output:

4"""

import sys

# считывание списка из входного потока
# lst_in = ['Мария', 'Елена', 'Екатерина', 'Александр', 'Елена', 'Мария']
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# print(len(set(lst_in)))

"""Подвиг 7. В аккаунте youtube Сергея прокомментировали очередное видео.
Некоторые посетители оставляли несколько комментариев. 
Требуется по списку комментариев определить уникальное число комментаторов. 
Комментарии поступают на вход программы в формате:

имя 1: комментарий 1
имя 2: комментарий 2
...
имя N: комментарий N

Также полагается, что имена у разных комментаторов не совпадают. 
Вывести на экран общее число уникальных комментаторов.

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

EvgeniyK: спасибо большое!
LinaTroshka: лайк и подписка!
Sergey Karandeev: крутое видео!
Евгений Соснин: обожаю
EvgeniyK: это повтор?
Sergey Karandeev: нет, это новое видео
Sample Output:

4"""

import sys

# считывание списка из входного потока
# lst_in = ['EvgeniyK: спасибо большое!',
#           'LinaTroshka: лайк и подписка!',
#           'Sergey Karandeev: крутое видео!',
#           'Евгений Соснин: обожаю',
#           'EvgeniyK: это повтор?',
#           'Sergey Karandeev: нет, это новое видео']
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# d = {}
# s = set()
# for i in lst_in:
#     key, value = i.split(":")[0], i[len(i.split(":")[0])+1:]
#     d.setdefault(key, value)
# for j in d.keys():
#     s.add(j)
# print(len(s))


# s = set()
# for i in lst_in:
#     key = i.split(":")[0]
#     s.add(key)
# print(len(s))

"""Подвиг 8. Пользователь с клавиатуры вводит названия городов, пока не введет букву q.
Определить общее уникальное число городов, которые вводил пользователь. 
На экран вывести это число. Из коллекций при реализации программы использовать только множества.

Sample Input:

Уфа
Москва
Тверь
Екатеринбург
Томск
Уфа
Москва
q
Sample Output:

5"""
# s = set()
# j = None
# while j != "q":
#     j = input()
#     if j != "q":
#         s.add(j)
#     else:
#         pass
# print(len(s))

# чужой
# print(len({i for i in iter(input, 'q')}))
# Но тут внимательно. Возвращается не значение, а итератор. len выводит количество итераторов






