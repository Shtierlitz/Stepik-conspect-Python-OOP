""" 6.1 Введение в словари """
""" Методы словарей"""

# dict.fromkeys(lst, "код страны") Возвращает словаряь Ключ:значение с ключами из списка и значением во втором арг
# clear() - удаляет все содержимое словаря
# copy() - создает копию словаря
# d2 = dicd(d) - тоже создает копию
# d.get("list") - возвращает значение по ключу в аргументе (если нет такого ключа возвращает None)
# d["list"] - возвращает значение по ключу (Если ключа нет, то будет ошибка)
# d.get("list", False) - если нет ключа вернет то, что во втором арг
# setdefault(key, default) - если ключ есть - вернет значение и словарь не меняется
#                          - если ключа нет создаст ключ из 1го арг и значение None если значение не указаноо
# pop(key, return) - удаляет пару по ключу и возвращает значение (если ключа нет вернет ошибку)
#       - второ1 арг указывается чтобы вернуть если ключа нет
# popitem() - удаляет последний ключ и возвращает кортеж (ключ, значение)
# keys()    - возвращает список ключей
# values()  - возвращает список значений
# items()   - возвращает список кортежей в формате [(key, value)]
# update(dict)  - добавляет в словарь другой словарь
#                - не забываем, что ключи заменяются при добавлении одинаковых
# d3 = {**d, **d2} - альтернативный способ обьеденения словарей
# d | d2 - еще один способ обьединения


"""Подвиг 3. Вводятся данные в формате ключ=значение в одну строчку через пробел. 
Значениями здесь являются целые числа (см. пример ниже). 
Необходимо на их основе создать словарь d с помощью функции dict() и вывести его на экран командой:

print(*sorted(d.items()))

Sample Input:

one=1 two=2 three=3
Sample Output:

('one', 1) ('three', 3) ('two', 2)"""
#
c = ['one 1', 'two 2', 'three 3']
# c = ['one', '1', 'two', '2', 'three', '3']
# c = input().replace("=", " ").split()
# d = dict([[c[i], int(c[i+1])] for i in range(0, len(c), 2)])
# for key in d:
#     d[key] = int(d[key])
# print(*sorted(d.items()))


"""Подвиг 4. На вход программы поступают данные в виде набора строк в формате: 

ключ1=значение1
ключ2=значение2
...
ключN=значениеN

Ключами здесь выступают целые числа (см. пример ниже). 
Необходимо их преобразовать в словарь d (без использования функции dict()) и вывести его на экран командой:

print(*sorted(d.items()))

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

5=отлично
4=хорошо
3=удовлетворительно
Sample Output:

(3, 'удовлетворительно') (4, 'хорошо') (5, 'отлично')"""

# lst = ['5=отлично', '4=хорошо', '3=удовлетворительно']
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# c = [i.split("=") for i in lst_in]
# d = {int(c[i][0]): c[i][1] for i in range(0, len(c), 1)}
# print(*sorted(d.items()))


"""Подвиг 5. Вводятся данные в формате ключ=значение в одну строчку через пробел. 
Необходимо на их основе создать словарь, затем проверить, существуют ли в нем ключи со значениями: 
'house', 'True' и '5' (все ключи - строки). Если все они существуют, то вывести на экран ДА, иначе - НЕТ.

Sample Input:

вологда=город house=дом True=1 5=отлично 9=божественно
Sample Output:

ДА"""
# c = {'вологда': 'город', 'house': 'дом', 'True': '1', '5': 'отлично', '9': 'божественно'}
# c = input().replace("=", " ").split()
# d = dict([[c[i], c[i+1]] for i in range(0, len(c), 2)])
# print("ДА" if "house" in d and "True" in d and "5" in d else "НЕТ")

"""Подвиг 6. Вводятся данные в формате ключ=значение в одну строчку через пробел. 
Необходимо на их основе создать словарь d, затем удалить из этого словаря ключи 'False' и '3', 
если они существуют. Ключами и значениями словаря являются строки. 
Вывести полученный словарь на экран командой:

print(*sorted(d.items()))

Sample Input:

лена=имя дон=река москва=город False=ложь 3=удовлетворительно True=истина
Sample Output:

('True', 'истина') ('дон', 'река') ('лена', 'имя') ('москва', 'город')"""


# c = input().replace("=", " ").split()
# d = dict([[c[i], c[i+1]] for i in range(0, len(c), 2)])
# if "False" in d:
#     del d["False"]
# if "3" in d:
#     del d["3"]
# print(*sorted(d.items()))

"""Подвиг 7. Вводятся номера телефонов в одну строчку через пробел с 
разными кодами стран: +7, +6, +2, +4 и т.д. Необходимо составить словарь d, 
где ключи - это коды +7, +6, +2 и т.п., а значения - список номеров (следующих в том же порядке, 
что и во входной строке) с соответствующими кодами. Полученный словарь вывести командой:

print(*sorted(d.items()))

Sample Input:

+71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
Sample Output:

('+2', ['+21235777890', '+21234567110']) ('+5', ['+52134567890']) 
('+6', ['+61234576890']) ('+7', ['+71234567890', '+71234567854', '+71232267890'])"""


"""вариант который помог"""
lst = ['+71234567890', '+71234567854', '+61234576890', '+52134567890', '+21235777890', '+21234567110', '+71232267890']
# # lst = input().split()
# print(lst)
d = {}
for i in range(len(lst)):
    kod = lst[i][0:2]
    if kod not in d:
        d[kod] = []
        d[kod].append(lst[i])
    else:
        d[kod].append(lst[i])
print(d)
# print(*sorted(d.items()))

"""еще вариант"""
# my_lst = input().split()

# my_key = {my_lst[i][0:2]: [my_lst[j] for j in range(len(my_lst)) if my_lst[i][0:2] == my_lst[j][0:2]] for i in
#           range(len(my_lst))}

# print(*sorted(my_key.items()))
# print(my_key)

"""Подвиг 8. Вводятся номера телефонов в формате:

номер_1 имя_1
номер_2 имя_2
...
номер_N имя_N

Необходимо создать словарь d, где ключами будут имена, 
а значениями - список номеров телефонов для этого имени. 
Обратите внимание, что одному имени может принадлежать несколько разных номеров. 
Полученный словарь вывести командой:

print(*sorted(d.items()))

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

+71234567890 Сергей
+71234567810 Сергей
+51234567890 Михаил
+72134567890 Николай
Sample Output:

('Михаил', ['+51234567890']) ('Николай', ['+72134567890']) ('Сергей', ['+71234567890', '+71234567810'])"""

# lst_in = ['+71234567890 Сергей', '+71234567810 Сергей', '+51234567890 Михаил', '+72134567890 Николай']
# import sys
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst = [i.split() for i in lst_in]
# lst2 = []
# for i in range(len(lst)):
#     for j in lst[i]:
#         lst2.append(j)
# d = {}
# for i in range(len(lst2)):
#     kod = lst2[i]
#     if lst2[i].isalpha():
#         if kod not in d:
#             d[kod] = []
#             d[kod].append(lst2[i-1])
#         else:
#             d[kod].append(lst2[i-1])
# print(*sorted(d.items()))


"""Подвиг 9. Пользователь вводит в цикле целые положительные числа, 
пока не введет число 0. Для каждого числа вычисляется квадратный корень (
с точностью до сотых) и значение выводится на экран (в столбик). 
С помощью словаря выполните кэширование данных так, 
чтобы при повторном вводе того же самого числа результат не вычислялся, 
а бралось ранее вычисленное значение из словаря. При этом на экране должно выводиться:

значение из кэша: <число>

Sample Input:

1
2
3
3
2
4
0
Sample Output:

1.0
1.41
1.73
значение из кэша: 1.73
значение из кэша: 1.41
2.0"""

# a = None
# lst = []
# d = {}
# while a != 0:
#     a = int(input())
#     b = a**0.5
#     if a == 0:
#         pass
#     else:
#         if round(b, 2) not in d.values():
#             d[a] = round(b, 2)
#             print(round(b, 2))
#         else:
#             print("значение из кэша: " + str(round(b, 2)))

"""Подвиг 10. Тестовый веб-сервер возвращает HTML-страницы по URL-адресам (строкам). 
На вход программы поступают различные URL-адреса. Если адрес пришел впервые, 
то на экране отобразить строку (без кавычек):

"HTML-страница для адреса <URL-адрес>"

Если адрес приходит повторно, то следует взять строку "HTML-страница для адреса <URL-адрес>" 
из словаря и вывести на экран сообщение (без кавычек):

"Взято из кэша: HTML-страница для адреса <URL-адрес>"

Сообщения выводить каждое с новой строки.

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:

ustanovka-i-zapusk-yazyka
ustanovka-i-poryadok-raboty-pycharm
peremennyye-operator-prisvaivaniya-tipy-dannykh
arifmeticheskiye-operatsii
ustanovka-i-poryadok-raboty-pycharm
Sample Output:

HTML-страница для адреса ustanovka-i-zapusk-yazyka
HTML-страница для адреса ustanovka-i-poryadok-raboty-pycharm
HTML-страница для адреса peremennyye-operator-prisvaivaniya-tipy-dannykh
HTML-страница для адреса arifmeticheskiye-operatsii
Взято из кэша: HTML-страница для адреса ustanovka-i-poryadok-raboty-pycharm"""


# lst_in = ['ustanovka-i-zapusk-yazyka', 'ustanovka-i-poryadok-raboty-pycharm',
# 'peremennyye-operator-prisvaivaniya-tipy-dannykh', 'arifmeticheskiye-operatsii',
# 'ustanovka-i-poryadok-raboty-pycharm']
# import sys
# lst_in = list(map(str.strip, sys.stdin.readlines()))
#
# d = {}
# html = "HTML-страница для адреса "
# cash = "Взято из кэша: "
# for i in range(len(lst_in)):
#     if lst_in[i] not in d.values():
#         d[i] = lst_in[i]
#         print(f"{html}" + lst_in[i])
#     else:
#         print(f"{cash}{html}" + lst_in[i])

# Вариант Жени где таки из кэша берется.
# lst_in = ['ustanovka-i-zapusk-yazyka', 'ustanovka-i-poryadok-raboty-pycharm',
# 'peremennyye-operator-prisvaivaniya-tipy-dannykh', 'arifmeticheskiye-operatsii',
# 'ustanovka-i-poryadok-raboty-pycharm']
# import sys
#
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# d = {}
# for site in lst_in:
#     if site not in d.keys():
#         d[site] = f"HTML-страница для адреса {site}"
#         print(d[site])
#     else:
#         print(f"Взято из кэша: {d[site]}")







