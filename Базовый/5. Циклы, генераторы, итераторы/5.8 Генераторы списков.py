


"""27. Генераторы списков (List comprehensions)"""

# Обычный метод
# N = 7
# a = [0] * N
#
# for i in range(N):
#     a[i] = i ** 2

# Генератором списка
# a = [x ** 2 for x in range(N)]
# print(a)
# b = [x % 4 for x in range(N)]       # Получаем список остатков
# print(b)
# c = [x % 2 == 0 for x in range(N)] # Получаем какие четные, а какие не четные
# print(c)
# d = [0.5 * x + 1 for x in range(N)] # список из значений линейной функции
# print(d)

# Список из вводимых чисел (не строк)
# d_inp = input("Целые числа через пробел ")
# a = [int(d) for d in d_inp.split()]
# print(d_inp)

# e = [d for d in "python"] # список из символов
# print(e)
# f = [ord(i) for i in "python"]  # Список из кодов символов
# print(f)
#
# g = [x for x in range(-5, 5) if x < 0]  # Список только из отрицательных чисел
# print(g)
# h = [x for x in range(-5, 5) if x % 2 == 0] # список только из четных значений
# print(h)
# j = [x for x in range(-6, 7) if x % 2 == 0 and x % 3 == 0] # составные условия
# print(j)
#
# # Создание списка из слов определенной длинны
# cities = ["Москва", "Тверь", "Рязань", "Ярославль", "Владимир"]
# a = [city for city in cities if len(city) < 7]
# print(a)
#
# # Тернарный оператор внутри генератора
# d = [4, 3, -5, 0, 2, 11, 122, -8, 9]
# a = ["четное" if x % 2 == 0 else "нечетное" for x in d]
# print(a)
# # или только для положительных значений
# a = ["четное" if x % 2 == 0 else "нечетное"
#      for x in d
#      if x > 0
#      ]
# print(a)

##############################################################################################

"""Подвиг 1. Вводятся вещественные числа в строку через пробел. 
Необходимо на их основе сформировать список lst с помощью list comprehension 
(генератора списков) из модулей введенных чисел (в списке должны храниться именно числа, а не строки). 
Результат вывести на экран в виде списка командой:

print(lst)

Sample Input:

5.56 -8.7 1.0 3.14 77.845
Sample Output:

[5.56, 8.7, 1.0, 3.14, 77.845]"""

# d_inp = input()
# lst = [abs(float(d)) for d in d_inp.split()]
# print(lst)

"""Вводится семизначное целое положительное число. С помощью list comprehension сформировать список lst, 
содержащий цифры этого числа (в списке должны быть записаны числа, а не строки). 
Результат вывести на экран список командой:

print(lst)

Sample Input:

4567397
Sample Output:

[4, 5, 6, 7, 3, 9, 7]"""

# inp = input()
# lst = [int(x) for x in inp]
# print(lst)

"""Подвиг 3. Вводится натуральное число N. 
С помощью list comprehension сформировать двумерный список размером N x N, 
состоящий из нулей, а по главной диагонали - единицы. 
(Главная диагональ - это элементы, идущие по диагонали от верхнего левого угла матрицы до ее 
нижнего правого угла). Результат вывести в виде таблицы чисел как показано в примере ниже.

Sample Input:

4
Sample Output:

1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1"""

# N = int(input())
N = 4
lst = [[1 if i == j else 0 for i in range(N)] for j in range(N)]
# for r in lst:
#     for x in range(len(r)):
#         print(str(r[x])+" " if not lst[x][-1] else str(r[x]), end="")
#     print()
print(lst)
[print(*i) for i in lst]

"""Подвиг 4. Вводятся названия городов в строку через пробел. 
Необходимо сформировать список с помощью list comprehension, 
содержащий названия длиной более пяти символов. Результат вывести в строчку через пробел.

Sample Input:

Казань Уфа Москва Челябинск Омск Тур Самара
Sample Output:

Казань Москва Челябинск Самара"""

# lst = ['Казань', 'Уфа', 'Москва', 'Челябинск', 'Омск', 'Тур', 'Самара']
# lst = list(input().split())
# a = [i for i in lst if len(i) > 5]
# print(*a)

"""Подвиг 5. Вводится натуральное число n. 
Необходимо сформировать список с помощью list comprehension, 
состоящий из делителей числа n (включая и само число n). 
Результат вывести на экран в одну строку через пробел.

Sample Input:

10
Sample Output:

1 2 5 10"""
# N = 10
# N = int(input())
# lst = [i for i in range(1, N+1) if N % i == 0]
# print(*lst)

"""Подвиг 6. Вводится натуральное число N. 
Необходимо сгенерировать вложенный список с помощью list comprehension, 
размером N x N, где первая строка содержала бы все нули, 
вторая - все единицы, третья - все двойки и так до N-й строки. 
Результат вывести в виде таблицы чисел как показано в примере ниже.

Sample Input:

4
Sample Output:

0 0 0 0
1 1 1 1
2 2 2 2
3 3 3 3"""


# N = 4
# N = int(input())
# lst = [[j for i in range(N)] for j in range(N)]
# [print(*i) for i in lst]

"""Подвиг 7. Вводится список вещественных чисел. 
С помощью list comprehension сформировать список, 
состоящий из элементов введенного списка, имеющих четные индексы 
(то есть, выбрать все элементы с четными индексами).
 Результат вывести на экран в одну строку через пробел.

Sample Input:

8.5 11.3 1.0 -4.5 11.34 6.45
Sample Output:

8.5 1.0 11.34"""
# lst = ['8.5', '11.3', '1.0', '-4.5', '11.34', '6.45']
# lst = list(input().split())
# print(*[lst[i] for i in range(len(lst)) if i % 2 == 0])

"""Подвиг 8. Вводятся два списка целых чисел одинаковой длины каждый с новой строки. 
С помощью list comprehension сформировать третий список, состоящий из суммы соответствующих 
пар чисел введенных списков. Результат вывести на экран в одну строку через пробел.

Sample Input:

1 2 3 4 5
6 7 8 9 10
Sample Output:

7 9 11 13 15"""
# lst_smal = [1, 2, 3, 4, 5]
# lst_big = [6, 7, 8, 9, 10]
# # lst_smal, lst_big = list(map(int,input().split())), list(map(int,input().split()))
# # lst_large =  [x + y for i, x in enumerate(lst_smal) for j, y in enumerate(lst_big) if i == j]
# lst_large = [lst_big[j] + lst_smal[i] for j in range(len(lst_big)) for i in range(len(lst_smal)) if i == j]
# print(*lst_large)

"""Подвиг 9. Вводится список в формате: 

<город 1> <численность населения 1> <город 2> <численность населения 2> ... <город N> <численность населения N>

Необходимо с помощью list comprehension сформировать список lst, содержащий вложенные списки из пар:

<город> <численность населения>

Численность населения - целое число в тыс. человек. Вывести результат на экран в виде списка командой:

print(lst)

Sample Input:

Москва 15000 Уфа 1200 Самара 1090 Казань 1300
Sample Output:

[['Москва', 15000], ['Уфа', 1200], ['Самара', 1090], ['Казань', 1300]]"""
# lst_start = ['Москва', '15000', 'Уфа', '1200', 'Самара', '1090', 'Казань', '1300']
# lst_start = list(input().split())
# lst = [[lst_start[i], int(lst_start[i+1])] for i in range(0, len(lst_start)-1, 2)]
# print(lst)





