"""Битовые операции И, ИЛИ, НЕ, XOR"""

# Битовая "не" она же ~
# это битовая инверсия которая обращает число и отнимает один
# a = 121
# print(bin(a))   # 0b1111001
# print(~a)       # -122 - десятичное
# print(~1)       # -2
# print(~-1)      # 0
# print(~-2)      # 1

# Битовая "И" она же &

# flags = 5
# mask = 4
# res = flags & mask
# print(res)      # 4
#
# if flags & mask == mask:
#     print("Включен 2-й бит числа")
# else:
#     print("второй бит выключен")
# # Включен 2-й бит числа
# print(bin(flags))   # 0b101
# print(bin(mask))    # 0b100

# flags = 13
# mask = 5
# print(bin(flags))
# print((bin(mask)))
# flags = flags & ~mask
# print(flags)        # 8
# print(0b1000)       # 8


# Битовая Или она же | (складывает все биты где у обоих чисел бит = 1)
# То есть везде где в сравнении есть 1 на выходе будет 1.
# flags = 8
# mask = 5
# print(bin(flags))
# print(bin(mask))
# print(0b1101)
# res = 13 = 0b1101
# res = flags | mask
# print(res)      # 13


# XOR - исключающее ИЛИ - То есть заменяет
# где только нули там 0, где  не только 0 там 1, где только 1 там 0
# flags = 9
# mask = 1
# print(bin(flags))
# print(bin(mask))
# print(0b1000)
# # res = 8 = 0b1000
# res = flags ^ mask
# print(res)  # 8

# приоритеты
# 1 - ~a он же не
# 2 -  & он же И
# 3 - (^-ИЛИ) (|-исключающая ИЛИ)   - с равным приоритетом

# смещения битов вправо - влево  << - >> (по сути это деление или умножение числа)
# сдвиг вправо на 1 делит число на 2 пока не дойдет до дробного, в дробном отбросит дробь.
# x = 160
# # print(bin(x))   # 0b10100000
# x = x >> 1
# print(x)    # 80
# print(bin(x))     # 0b1010000


"""Подвиг 2. На вход программы подается целое десятичное число. 
Используя битовые операции, включите третий бит введенного числа. 
Выведите на экран полученное числовое значение.

P. S. Распределение номеров бит представлено на следующем рисунке.



Sample Input:

100
Sample Output:

108"""

# a = int(input())
# a = 100
# print(bin(a))
# print(bin(8))
# res = a | 8
#
# print(res)

# Чужое
# flag = int(input())
# mask = int(0b00001000)
# check = flag&mask
# if check == 0:
#     flag = flag|mask
# print(flag)

"""Подвиг 3. На вход программы подается целое десятичное число. 
Используя битовые операции, выключите 4-й и 1-й биты введенного числа. 
Выведите на экран полученное числовое значение.

P. S. Распределение номеров бит представлено на следующем рисунке.

Sample Input:

153
Sample Output:

137"""

# a = 153 # 0b10011001
# x = a &  ~0b00010010
# print(x)

"""Подвиг 4. На вход программы подается целое десятичное число. 
Используя битовые операции, переключите 3-й и 0-й биты введенного числа. 
Выведите на экран полученное числовое значение.

P. S. Распределение номеров бит представлено на следующем рисунке.



Sample Input:

58
Sample Output:

51"""
# check = 51  # 0b110011
# a = 58      # 0b111010
# b =           0b001001
# c = a ^ b
# print(bin(c))
# print(c)

"""Подвиг 5. На вход программы подается целое десятичное число. 
Используя битовые операции, выполните умножение введенного числа на 4. 
Результат отобразите на экране.

Sample Input:

40
Sample Output:

160"""

# a = 40
# b = a << 2
# print(b)

# a = 22
# b = a >> 1
# print(b)


"""Подвиг 7. Вводится зашифрованное слово. 
Шифрование кодов символов этого слова было проведено с помощью битовой операции XOR с ключом key=123. 
То есть, каждый символ был преобразован по алгоритму:

x = ord(x) ^ key

Здесь ord - функция, возвращающая код символа x. 
Расшифруйте введенное слово и выведите его на экран.

P. S. Подсказка: для преобразования кода в символ используйте функцию chr.

Sample Input:

ѩкю[щюлцхZ
Sample Output:

Все верно!"""

# a = "ѩкю[щюлцхZ"
#
# key=123
# for x in a:
#     x = ord(x) ^ key
#     print(chr(x), end="")

"""Подвиг 8. На вход программы подается целое десятичное число. 
Используя битовые операции, проверьте, включен ли 6-й и 3-й биты введенного числа. 
Если они оба включены, то выведите слово ДА, иначе - слово НЕТ.

P. S. Распределение номеров бит представлено на следующем рисунке.



Sample Input:

106
Sample Output:

ДА"""

# a = 106     # 0b1101010
# b =  0b1001000
# print("ДА" if a & b == b else "НЕТ")

"""Подвиг 9. На вход программы подается целое десятичное число. 
Используя битовые операции, проверьте, включен ли 5-й или 1-й биты введенного числа. 
Если включен хотя бы один из этих битов, то выведите слово ДА, иначе - слово НЕТ.

P. S. Распределение номеров бит представлено на следующем рисунке.



Sample Input:

74
Sample Output:

ДА"""

a = 74      # 0b1001010
b =  0b0100010
c =  0b0000010
d =  0b0100000

if a &  b == b or a & c == c or a & d == d:
    print("ДА")
else:
    print("НЕТ")